#!/bin/bash
# Bash script for rolling update with zero-downtime monitoring
# Usage: bash messaging_app/kubctl-0x03

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}[HEADER]${NC} $1"
}

# Function to check if kubectl is available
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    print_status "kubectl is available"
}

# Function to check if curl is available
check_curl() {
    if ! command -v curl &> /dev/null; then
        print_error "curl is not installed or not in PATH"
        exit 1
    fi
    print_status "curl is available"
}

# Function to get current deployment status
get_deployment_status() {
    echo "Current deployment status:"
    kubectl get deployment messaging-app-blue -o wide
    echo ""
}

# Function to get current pods
get_pods_status() {
    echo "Current pods status:"
    kubectl get pods -l app=messaging-app,version=blue -o wide
    echo ""
}

# Function to test application availability
test_app_availability() {
    local service_name=$1
    local port=$2
    local test_duration=$3
    
    print_status "Testing application availability on $service_name:$port for ${test_duration}s"
    
    # Start port-forward in background
    kubectl port-forward service/$service_name $port:8000 > /dev/null 2>&1 &
    local pf_pid=$!
    
    # Wait for port-forward to be ready
    sleep 3
    
    # Test counter
    local total_requests=0
    local successful_requests=0
    local failed_requests=0
    
    # Start time
    local start_time=$(date +%s)
    local end_time=$((start_time + test_duration))
    
    print_status "Starting availability test at $(date)"
    
    while [ $(date +%s) -lt $end_time ]; do
        total_requests=$((total_requests + 1))
        
        # Send HTTP request and capture response
        if curl -s -f -o /dev/null -w "%{http_code}" "http://localhost:$port/" > /dev/null 2>&1; then
            successful_requests=$((successful_requests + 1))
            echo -n "."
        else
            failed_requests=$((failed_requests + 1))
            echo -n "x"
        fi
        
        # Small delay between requests
        sleep 0.1
    done
    
    echo ""  # New line after dots/x's
    
    # Calculate availability percentage
    local availability_percentage=0
    if [ $total_requests -gt 0 ]; then
        availability_percentage=$(echo "scale=2; $successful_requests * 100 / $total_requests" | bc -l 2>/dev/null || echo "0")
    fi
    
    print_status "Availability test completed:"
    echo "  Total requests: $total_requests"
    echo "  Successful: $successful_requests"
    echo "  Failed: $failed_requests"
    echo "  Availability: ${availability_percentage}%"
    
    # Stop port-forward
    kill $pf_pid 2>/dev/null || true
    
    # Return success if availability is above 95%
    if [ $failed_requests -eq 0 ] || [ $(echo "$availability_percentage >= 95" | bc -l 2>/dev/null || echo "0") -eq 1 ]; then
        print_status "✅ Application availability test PASSED"
        return 0
    else
        print_warning "⚠️  Application availability test shows some failures"
        return 1
    fi
}

# Function to monitor rolling update
monitor_rolling_update() {
    local deployment_name=$1
    local timeout_seconds=600  # 10 minutes timeout
    
    print_status "Starting rolling update monitoring for $deployment_name"
    
    # Start monitoring in background
    kubectl rollout status deployment/$deployment_name --timeout=${timeout_seconds}s &
    local rollout_pid=$!
    
    # Wait for rollout to complete
    wait $rollout_pid
    local rollout_exit_code=$?
    
    if [ $rollout_exit_code -eq 0 ]; then
        print_status "✅ Rolling update completed successfully"
        return 0
    else
        print_error "❌ Rolling update failed or timed out"
        return 1
    fi
}

# Main execution
main() {
    print_header "Starting Rolling Update with Zero-Downtime Monitoring"
    echo ""
    
    # Pre-flight checks
    check_kubectl
    check_curl
    echo ""
    
    # Show initial state
    print_header "Initial Deployment State"
    get_deployment_status
    get_pods_status
    
    # Test initial availability
    print_header "Testing Initial Application Availability"
    if ! test_app_availability "messaging-app-blue" "8000" "30"; then
        print_warning "Initial availability test had some issues, but continuing with update"
    fi
    echo ""
    
    # Apply updated deployment
    print_header "Applying Updated Deployment"
    print_status "Applying blue_deployment.yaml with image messaging-app:2.0"
    kubectl apply -f messaging_app/blue_deployment.yaml
    
    if [ $? -eq 0 ]; then
        print_status "✅ Deployment file applied successfully"
    else
        print_error "❌ Failed to apply deployment file"
        exit 1
    fi
    echo ""
    
    # Monitor rolling update
    print_header "Monitoring Rolling Update Progress"
    if monitor_rolling_update "messaging-app-blue"; then
        print_status "✅ Rolling update completed successfully"
    else
        print_error "❌ Rolling update failed"
        exit 1
    fi
    echo ""
    
    # Show final state
    print_header "Final Deployment State"
    get_deployment_status
    get_pods_status
    
    # Test final availability
    print_header "Testing Final Application Availability"
    if test_app_availability "messaging-app-blue" "8000" "30"; then
        print_status "✅ Final availability test PASSED - No downtime detected"
    else
        print_warning "⚠️  Final availability test shows some issues"
    fi
    echo ""
    
    # Verify rolling update completion
    print_header "Verifying Rolling Update Completion"
    
    # Check if all pods are running with new image
    local new_image_pods=$(kubectl get pods -l app=messaging-app,version=blue -o jsonpath='{.items[*].spec.containers[0].image}' | grep -c "messaging-app:2.0" || echo "0")
    local total_pods=$(kubectl get pods -l app=messaging-app,version=blue --no-headers | wc -l)
    
    if [ "$new_image_pods" -eq "$total_pods" ] && [ "$total_pods" -gt 0 ]; then
        print_status "✅ All $total_pods pods are running with new image messaging-app:2.0"
    else
        print_error "❌ Not all pods are running with new image"
        print_status "Pods with new image: $new_image_pods/$total_pods"
    fi
    
    # Check deployment status
    local available_replicas=$(kubectl get deployment messaging-app-blue -o jsonpath='{.status.availableReplicas}' || echo "0")
    local desired_replicas=$(kubectl get deployment messaging-app-blue -o jsonpath='{.spec.replicas}' || echo "0")
    
    if [ "$available_replicas" -eq "$desired_replicas" ] && [ "$desired_replicas" -gt 0 ]; then
        print_status "✅ Deployment is fully available: $available_replicas/$desired_replicas replicas"
    else
        print_error "❌ Deployment is not fully available: $available_replicas/$desired_replicas replicas"
    fi
    
    echo ""
    print_header "Rolling Update Summary"
    print_status "✅ Rolling update completed successfully"
    print_status "✅ Application maintained availability during update"
    print_status "✅ All pods are running with new image messaging-app:2.0"
    print_status "✅ Zero-downtime deployment achieved"
}

# Run main function
main "$@"
